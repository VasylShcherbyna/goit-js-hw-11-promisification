{"version":3,"sources":["js/promise-03.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","time","makeTransaction","transaction","Promise","resolve","reject","setTimeout","canProcess","id","logSuccess","console","log","logError","warn","amount","then","catch"],"mappings":";AAGA,IAAMA,EAA4B,SAACC,EAAKC,GAC/BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAGhDK,EAAON,EAA0B,IAAK,KAEtCO,EAAkB,SAACC,GAChB,OAAA,IAAIC,QAAS,SAACC,EAASC,GAC5BC,WAAW,WAELC,GADeV,KAAKE,SAAW,GACnB,CACRS,IAAAA,EAAKN,EAAYM,GACvBJ,EAAQ,CAACI,GAAAA,EAAIR,KAAAA,SAEbK,EAAOH,EAAYM,KAEpBR,MAIDS,EAAa,SAAgB,GAAdD,IAAAA,EAAAA,EAAAA,GAAIR,EAAAA,EAAAA,KACvBU,QAAQC,IAAmBH,eAAAA,OAAAA,EAAmBR,kBAAAA,OAAAA,EAA9C,SAGIY,EAAW,SAACJ,GAChBE,QAAQG,KAAqCL,gCAAAA,OAAAA,EAA7C,+BAGFP,EAAgB,CAAEO,GAAI,GAAIM,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ,GAETX,EAAgB,CAAEO,GAAI,GAAIM,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ,GAETX,EAAgB,CAAEO,GAAI,GAAIM,OAAQ,KAC/BC,KAAKN,GACLO,MAAMJ,GAETX,EAAgB,CAAEO,GAAI,GAAIM,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ","file":"promise-03.45fd8ded.js","sourceRoot":"..\\src","sourcesContent":["// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, \n// а принимала всего один параметр transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst time = randomIntegerFromInterval(200, 500);\n\nconst makeTransaction = (transaction) => {\n  return new Promise ((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n      if (canProcess) {\n        const id = transaction.id;\n        resolve({id, time});\n      } else {\n        reject(transaction.id);\n      }\n    }, time);\n  })\n};\n\nconst logSuccess = ({id, time}) => {\n  console.log(`Transaction ${id} processed in ${time} ms`);\n};\n\nconst logError = (id) => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);"]}